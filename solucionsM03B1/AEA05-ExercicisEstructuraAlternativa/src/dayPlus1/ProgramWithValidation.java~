/*
 * ProgramWithValidation.java        1.0 25/10/2011
 *
 * Models the program.
 *
 * Copyright 2011 Mònica Ramírez Arceda <mramirez@escoladeltreball.org>
 *                Joaquim Laplana Tarragona <jlaplana@escoladeltreball.org>
 *
 * This is free software, licensed under the GNU General Public License v3.
 * See http://www.gnu.org/licenses/gpl.html for more information.
 */

public class ProgramWithValidation {
    /**
     * Verifies if a date is valid.
     * 
     * @param day an integer number that represents a day number (1-31).
     * @param month an integer number that represents a month number (1-12).
     * @param year an integer number that represents a year
     * @return true if the date day/month/year is valid, false otherwise
     */
    public boolean isDate(int day, int month, int year) {
        // Validate if it is a date with a month of 30 days
        // (April, June, September or November)
        boolean isValidDateMonth30days = 0 < day && day <= 30 && (month == 4 || month == 6 || month == 9 || month == 11) && 1583 <= year && year <= 3000;
        // Validate if it is a date with a month of 31 days
        // (January, March, May, July, August, October or December)
        boolean isValidDateMonth31days = 0 < day && day <= 31 && (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) && 1583 <= year && year <= 3000;
        // Validate if it is a date with a month of 28 days.
        // (February)
        boolean isValidDateMonth28days = 0 < day && day <= 28 && month == 2 && 1583 <= year && year <= 3000;
        // Validate if it is a date with a month of 29 days.
        // (February in a leap year)
        boolean isValidDateMonth29days = 0 < day && day <= 29 && month == 2 && 1583 <= year && year <= 3000 && (year % 400 == 0 || year % 4 == 0 && year % 100 != 0);
        // If any of the above conditions is true, the date is valid.
        boolean isValidDate = isValidDateMonth30days || isValidDateMonth28days || isValidDateMonth29days || isValidDateMonth31days;
        return isValidDate;
    }

    /**
     * Determines the next day of a date. This method does NOT validate if input
     * the date is correct.
     * 
     * @param d a day (a real number between 1 and 31).
     * @param m a month (a real number between 1 and 12).
     * @param y a year (a real number between 1583 and 3000).
     * @return the date plus one day, with the format "dd/mm/yyyy" or "ERROR" if
     *         the date is not valid
     */
    public String dayPlus1(int d, int m, int y) {
        if (!isDate(d, m, y))
            return "ERROR";

        if (m == 4 || m == 6 || m == 9 || m == 11) {
            if (d < 30) // If it's not the last day of the month, add 1 day
                d++;
            else { // If it's the last day of the month, reset the day and add 1
                   // month
                d = 1;
                m++;
            }
        } else if (m == 1 || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) {
            if (d < 31) // If it's not the last day of the month, add 1 day
                d++;
            else { // If it's the last day of the month, reset the day
                d = 1;
                if (m == 12) { // If it's the last month, reset the month and
                               // add 1 year
                    m = 1;
                    y++;
                } else { // If it's not the last month, add 1 month
                    m++;
                }
            }
            // If it's February and a leap year
        } else if ((y % 4 == 0 && y % 100 != 0 || y % 400 == 0) && m == 2) {
            if (d < 29) // If it's not the last day of the month, add 1 day
                d++;
            else { // If it's the last day of the month, reset the day and add 1
                   // month
                d = 1;
                m++;
            }
        } else { // if it's February
            if (d < 28)// If it's not the last day of the month, add 1 day
                d++;
            else { // If it's the last day of the month, reset the day and add 1
                   // month
                d = 1;
                m++;
            }
        }
        // Return the date plus one day
        return d + "/" + m + "/" + y;
    }
}
